package com.dbpower.urlimageviewhelper;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import android.widget.ImageView;
import com.dbpower.urlimageviewhelper.UrlDownloader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import junit.framework.Assert;
import org.apache.http.NameValuePair;
import org.codehaus.jackson.util.MinimalPrettyPrinter;

public final class UrlImageViewHelper {
    public static final int CACHE_DURATION_FIVE_DAYS = 432000000;
    public static final int CACHE_DURATION_FOUR_DAYS = 345600000;
    public static final int CACHE_DURATION_INFINITE = Integer.MAX_VALUE;
    public static final int CACHE_DURATION_ONE_DAY = 86400000;
    public static final int CACHE_DURATION_ONE_WEEK = 604800000;
    public static final int CACHE_DURATION_SIX_DAYS = 518400000;
    public static final int CACHE_DURATION_THREE_DAYS = 259200000;
    public static final int CACHE_DURATION_TWO_DAYS = 172800000;
    /* access modifiers changed from: private */
    public static HashSet<Bitmap> mAllCache = new HashSet<>();
    private static ContactContentUrlDownloader mContactDownloader = new ContactContentUrlDownloader();
    private static ContentUrlDownloader mContentDownloader = new ContentUrlDownloader();
    /* access modifiers changed from: private */
    public static LruBitmapCache mDeadCache = null;
    private static ArrayList<UrlDownloader> mDownloaders = new ArrayList<>();
    private static FileUrlDownloader mFileDownloader = new FileUrlDownloader();
    private static boolean mHasCleaned = false;
    private static HttpUrlDownloader mHttpDownloader = new HttpUrlDownloader();
    /* access modifiers changed from: private */
    public static DrawableCache mLiveCache = DrawableCache.getInstance();
    static DisplayMetrics mMetrics = null;
    /* access modifiers changed from: private */
    public static Hashtable<String, ArrayList<ImageView>> mPendingDownloads = new Hashtable<>();
    /* access modifiers changed from: private */
    public static Hashtable<ImageView, String> mPendingViews = new Hashtable<>();
    private static RequestPropertiesCallback mRequestPropertiesCallback = null;
    static Resources mResources = null;
    private static boolean mUseBitmapScaling = true;

    private static abstract class Loader implements UrlDownloader.UrlDownloaderCallback {
        Bitmap result;

        private Loader() {
        }

        /* synthetic */ Loader(Loader loader) {
            this();
        }
    }

    public interface RequestPropertiesCallback {
        ArrayList<NameValuePair> getHeadersForRequest(Context context, String str);
    }

    private static class ZombieDrawable extends BitmapDrawable {
        Brains mBrains;
        String mUrl;

        private static class Brains {
            boolean mHeadshot;
            int mRefCounter;

            private Brains() {
            }

            /* synthetic */ Brains(Brains brains) {
                this();
            }
        }

        public ZombieDrawable(String str, Resources resources, Bitmap bitmap) {
            this(str, resources, bitmap, new Brains((Brains) null));
        }

        private ZombieDrawable(String str, Resources resources, Bitmap bitmap, Brains brains) {
            super(resources, bitmap);
            this.mUrl = str;
            this.mBrains = brains;
            UrlImageViewHelper.mAllCache.add(bitmap);
            UrlImageViewHelper.mDeadCache.remove(str);
            UrlImageViewHelper.mLiveCache.put(str, this);
            this.mBrains.mRefCounter++;
        }

        public ZombieDrawable clone(Resources resources) {
            return new ZombieDrawable(this.mUrl, resources, getBitmap(), this.mBrains);
        }

        /* access modifiers changed from: protected */
        public void finalize() throws Throwable {
            super.finalize();
            Brains brains = this.mBrains;
            brains.mRefCounter--;
            if (this.mBrains.mRefCounter == 0) {
                if (!this.mBrains.mHeadshot) {
                    UrlImageViewHelper.mDeadCache.put(this.mUrl, getBitmap());
                }
                UrlImageViewHelper.mAllCache.remove(getBitmap());
                UrlImageViewHelper.mLiveCache.remove(this.mUrl);
                UrlImageViewHelper.clog("Zombie GC event " + this.mUrl, new Object[0]);
            }
        }

        public void headshot() {
            UrlImageViewHelper.clog("BOOM! Headshot: " + this.mUrl, new Object[0]);
            this.mBrains.mHeadshot = true;
            UrlImageViewHelper.mLiveCache.remove(this.mUrl);
            UrlImageViewHelper.mAllCache.remove(getBitmap());
        }
    }

    static {
        mDownloaders.add(mHttpDownloader);
        mDownloaders.add(mContactDownloader);
        mDownloaders.add(mContentDownloader);
        mDownloaders.add(mFileDownloader);
    }

    private static boolean checkCacheDuration(File file, long j) {
        return j == 2147483647L || System.currentTimeMillis() < file.lastModified() + j;
    }

    public static void cleanup(Context context) {
        cleanup(context, 604800000);
    }

    public static void cleanup(Context context, long j) {
        if (!mHasCleaned) {
            mHasCleaned = true;
            try {
                String[] list = context.getFilesDir().list();
                if (list != null) {
                    for (String str : list) {
                        if (str.endsWith(".urlimage")) {
                            File file = new File(String.valueOf(context.getFilesDir().getAbsolutePath()) + '/' + str);
                            if (System.currentTimeMillis() > file.lastModified() + 604800000) {
                                file.delete();
                            }
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    static void clog(String str, Object... objArr) {
        if (objArr.length != 0) {
            String.format(str, objArr);
        }
    }

    public static int copyStream(InputStream inputStream, OutputStream outputStream) throws IOException {
        byte[] bArr = new byte[1024];
        int i = 0;
        while (true) {
            int read = inputStream.read(bArr);
            if (read == -1) {
                return i;
            }
            outputStream.write(bArr, 0, read);
            i += read;
        }
    }

    static void executeTask(AsyncTask<Void, Void, Void> asyncTask) {
        if (Build.VERSION.SDK_INT < 11) {
            asyncTask.execute(new Void[0]);
        } else {
            executeTaskHoneycomb(asyncTask);
        }
    }

    @TargetApi(11)
    private static void executeTaskHoneycomb(AsyncTask<Void, Void, Void> asyncTask) {
        asyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
    }

    public static Bitmap getCachedBitmap(String str) {
        if (str == null) {
            return null;
        }
        Bitmap bitmap = mDeadCache != null ? (Bitmap) mDeadCache.get(str) : null;
        if (bitmap != null) {
            return bitmap;
        }
        if (mLiveCache != null) {
            Drawable drawable = (Drawable) mLiveCache.get(str);
            if (drawable instanceof ZombieDrawable) {
                return ((ZombieDrawable) drawable).getBitmap();
            }
        }
        return null;
    }

    public static ArrayList<UrlDownloader> getDownloaders() {
        return mDownloaders;
    }

    public static String getFilenameForUrl(String str) {
        return String.valueOf(str.hashCode()) + ".urlimage";
    }

    private static int getHeapSize(Context context) {
        return ((ActivityManager) context.getSystemService("activity")).getMemoryClass() * 1024 * 1024;
    }

    public static RequestPropertiesCallback getRequestPropertiesCallback() {
        return mRequestPropertiesCallback;
    }

    public static boolean getUseBitmapScaling() {
        return mUseBitmapScaling;
    }

    private static boolean isNullOrEmpty(CharSequence charSequence) {
        return charSequence == null || charSequence.equals("") || charSequence.equals("null") || charSequence.equals("NULL");
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x0096 A[SYNTHETIC, Splitter:B:28:0x0096] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x00aa A[SYNTHETIC, Splitter:B:38:0x00aa] */
    /* JADX WARNING: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static android.graphics.Bitmap loadBitmapFromStream(android.content.Context r7, java.lang.String r8, java.lang.String r9, int r10, int r11) {
        /*
            r5 = 1
            r0 = 0
            r2 = 0
            prepareResources(r7)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            java.lang.String r3 = "Decoding: "
            r1.<init>(r3)
            r1.append(r8)
            java.lang.String r3 = " "
            r1.append(r3)
            r1.append(r9)
            java.lang.String r1 = r1.toString()
            java.lang.Object[] r3 = new java.lang.Object[r0]
            clog(r1, r3)
            boolean r1 = com.dbpower.urlimageviewhelper.UrlImageViewHelper.mUseBitmapScaling     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            if (r1 == 0) goto L_0x0086
            android.graphics.BitmapFactory$Options r1 = new android.graphics.BitmapFactory$Options     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            r1.<init>()     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            r3 = 1
            r1.inJustDecodeBounds = r3     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            java.io.FileInputStream r3 = new java.io.FileInputStream     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            r3.<init>(r9)     // Catch:{ IOException -> 0x00a6, all -> 0x009a }
            r4 = 0
            android.graphics.BitmapFactory.decodeStream(r3, r4, r1)     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            r3.close()     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
        L_0x0039:
            int r4 = r1.outWidth     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            int r4 = r4 >> r0
            if (r4 > r10) goto L_0x0083
            int r4 = r1.outHeight     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            int r4 = r4 >> r0
            if (r4 > r11) goto L_0x0083
            android.graphics.BitmapFactory$Options r1 = new android.graphics.BitmapFactory$Options     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            r1.<init>()     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            int r0 = r5 << r0
            r1.inSampleSize = r0     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            r0 = r1
        L_0x004d:
            java.io.FileInputStream r1 = new java.io.FileInputStream     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            r1.<init>(r9)     // Catch:{ IOException -> 0x00ba, all -> 0x0092 }
            r3 = 0
            android.graphics.Bitmap r0 = android.graphics.BitmapFactory.decodeStream(r1, r3, r0)     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            java.lang.String r3 = "Loaded bitmap (%dx%d)."
            r4 = 2
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            r5 = 0
            int r6 = r0.getWidth()     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            r4[r5] = r6     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            r5 = 1
            int r6 = r0.getHeight()     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            r4[r5] = r6     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            java.lang.String r3 = java.lang.String.format(r3, r4)     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            r4 = 0
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            clog(r3, r4)     // Catch:{ IOException -> 0x00b7, all -> 0x00bc }
            if (r1 == 0) goto L_0x0081
            r1.close()     // Catch:{ IOException -> 0x0089 }
        L_0x0081:
            r2 = r0
        L_0x0082:
            return r2
        L_0x0083:
            int r0 = r0 + 1
            goto L_0x0039
        L_0x0086:
            r0 = r2
            r3 = r2
            goto L_0x004d
        L_0x0089:
            r1 = move-exception
            java.lang.String r2 = "UrlImageViewHelper"
            java.lang.String r3 = "Failed to close FileInputStream"
            android.util.Log.w(r2, r3, r1)
            goto L_0x0081
        L_0x0092:
            r0 = move-exception
            r1 = r3
        L_0x0094:
            if (r1 == 0) goto L_0x0099
            r1.close()     // Catch:{ IOException -> 0x009d }
        L_0x0099:
            throw r0
        L_0x009a:
            r0 = move-exception
            r1 = r2
            goto L_0x0094
        L_0x009d:
            r1 = move-exception
            java.lang.String r2 = "UrlImageViewHelper"
            java.lang.String r3 = "Failed to close FileInputStream"
            android.util.Log.w(r2, r3, r1)
            goto L_0x0099
        L_0x00a6:
            r0 = move-exception
            r3 = r2
        L_0x00a8:
            if (r3 == 0) goto L_0x0082
            r3.close()     // Catch:{ IOException -> 0x00ae }
            goto L_0x0082
        L_0x00ae:
            r0 = move-exception
            java.lang.String r1 = "UrlImageViewHelper"
            java.lang.String r3 = "Failed to close FileInputStream"
            android.util.Log.w(r1, r3, r0)
            goto L_0x0082
        L_0x00b7:
            r0 = move-exception
            r3 = r1
            goto L_0x00a8
        L_0x00ba:
            r0 = move-exception
            goto L_0x00a8
        L_0x00bc:
            r0 = move-exception
            goto L_0x0094
        */
        throw new UnsupportedOperationException("Method not decompiled: com.dbpower.urlimageviewhelper.UrlImageViewHelper.loadBitmapFromStream(android.content.Context, java.lang.String, java.lang.String, int, int):android.graphics.Bitmap");
    }

    public static void loadUrlDrawable(Context context, String str) {
        setUrlDrawable(context, (ImageView) null, str, (Drawable) null, 259200000, (UrlImageViewCallback) null);
    }

    public static void loadUrlDrawable(Context context, String str, long j) {
        setUrlDrawable(context, (ImageView) null, str, (Drawable) null, j, (UrlImageViewCallback) null);
    }

    public static void loadUrlDrawable(Context context, String str, long j, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(context, (ImageView) null, str, (Drawable) null, j, urlImageViewCallback);
    }

    public static void loadUrlDrawable(Context context, String str, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(context, (ImageView) null, str, (Drawable) null, 259200000, urlImageViewCallback);
    }

    private static void prepareResources(Context context) {
        if (mMetrics == null) {
            mMetrics = new DisplayMetrics();
            ((WindowManager) context.getSystemService("window")).getDefaultDisplay().getMetrics(mMetrics);
            mResources = new Resources(context.getAssets(), mMetrics, context.getResources().getConfiguration());
        }
    }

    public static void setRequestPropertiesCallback(RequestPropertiesCallback requestPropertiesCallback) {
        mRequestPropertiesCallback = requestPropertiesCallback;
    }

    private static void setUrlDrawable(Context context, ImageView imageView, String str, int i, long j) {
        setUrlDrawable(context, imageView, str, i != 0 ? imageView.getResources().getDrawable(i) : null, j, (UrlImageViewCallback) null);
    }

    private static void setUrlDrawable(Context context, ImageView imageView, String str, int i, long j, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(context, imageView, str, i != 0 ? imageView.getResources().getDrawable(i) : null, j, urlImageViewCallback);
    }

    private static void setUrlDrawable(Context context, ImageView imageView, String str, Drawable drawable, long j, UrlImageViewCallback urlImageViewCallback) {
        Drawable drawable2;
        Assert.assertTrue("setUrlDrawable and loadUrlDrawable should only be called from the main thread.", Looper.getMainLooper().getThread() == Thread.currentThread());
        cleanup(context);
        if (!isNullOrEmpty(str)) {
            if (mMetrics == null) {
                prepareResources(context);
            }
            final int i = mMetrics.widthPixels;
            final int i2 = mMetrics.heightPixels;
            final String absolutePath = context.getFileStreamPath(getFilenameForUrl(str)).getAbsolutePath();
            File file = new File(absolutePath);
            if (mDeadCache == null) {
                mDeadCache = new LruBitmapCache(getHeapSize(context) / 8);
            }
            Bitmap bitmap = (Bitmap) mDeadCache.remove(str);
            if (bitmap != null) {
                clog("zombie load: " + str, new Object[0]);
                drawable2 = new ZombieDrawable(str, mResources, bitmap);
            } else {
                drawable2 = (Drawable) mLiveCache.get(str);
            }
            if (drawable2 != null) {
                clog("Cache hit on: " + str, new Object[0]);
                if (!file.exists() || checkCacheDuration(file, j)) {
                    clog("Using cached: " + str, new Object[0]);
                } else {
                    clog("Cache hit, but file is stale. Forcing reload: " + str, new Object[0]);
                    if (drawable2 instanceof ZombieDrawable) {
                        ((ZombieDrawable) drawable2).headshot();
                    }
                    drawable2 = null;
                }
            }
            if (drawable2 != null) {
                if (imageView != null) {
                    mPendingViews.remove(imageView);
                    if (drawable2 instanceof ZombieDrawable) {
                        drawable2 = ((ZombieDrawable) drawable2).clone(mResources);
                    }
                    imageView.setImageDrawable(drawable2);
                }
                if (urlImageViewCallback != null) {
                    boolean z = drawable2 instanceof ZombieDrawable;
                    urlImageViewCallback.onLoaded(imageView, bitmap, str, true);
                    return;
                }
                return;
            }
            clog("Waiting for " + str + MinimalPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR + imageView, new Object[0]);
            if (imageView != null) {
                imageView.setImageDrawable(drawable);
                mPendingViews.put(imageView, str);
            }
            ArrayList arrayList = mPendingDownloads.get(str);
            if (arrayList == null) {
                final ArrayList arrayList2 = new ArrayList();
                if (imageView != null) {
                    arrayList2.add(imageView);
                }
                mPendingDownloads.put(str, arrayList2);
                if (i <= 0) {
                    i = Integer.MAX_VALUE;
                }
                if (i2 <= 0) {
                    i2 = Integer.MAX_VALUE;
                }
                final Context context2 = context;
                final String str2 = str;
                final AnonymousClass1 r2 = new Loader() {
                    public void onDownloadComplete(UrlDownloader urlDownloader, InputStream inputStream, String str) {
                        File file;
                        try {
                            Assert.assertTrue(inputStream == null || str == null);
                            if (inputStream != null || str != null) {
                                String str2 = absolutePath;
                                if (inputStream != null) {
                                    FileOutputStream fileOutputStream = new FileOutputStream(absolutePath);
                                    UrlImageViewHelper.copyStream(inputStream, fileOutputStream);
                                    fileOutputStream.close();
                                    str = str2;
                                }
                                this.result = UrlImageViewHelper.loadBitmapFromStream(context2, str2, str, i, i2);
                                if (urlDownloader != null && !urlDownloader.allowCache()) {
                                    file = new File(absolutePath);
                                    file.delete();
                                }
                            } else if (urlDownloader != null && !urlDownloader.allowCache()) {
                                new File(absolutePath).delete();
                            }
                        } catch (Exception e) {
                            new File(absolutePath).delete();
                            if (urlDownloader != null && !urlDownloader.allowCache()) {
                                file = new File(absolutePath);
                            }
                        } catch (Throwable th) {
                            if (urlDownloader != null && !urlDownloader.allowCache()) {
                                new File(absolutePath).delete();
                            }
                            throw th;
                        }
                    }
                };
                final AnonymousClass1 r5 = r2;
                final String str3 = str;
                final Drawable drawable3 = drawable;
                final UrlImageViewCallback urlImageViewCallback2 = urlImageViewCallback;
                final ImageView imageView2 = imageView;
                final AnonymousClass2 r4 = new Runnable() {
                    public void run() {
                        Drawable drawable;
                        Assert.assertEquals(Looper.myLooper(), Looper.getMainLooper());
                        Bitmap bitmap = Loader.this.result;
                        Drawable zombieDrawable = bitmap != null ? new ZombieDrawable(str3, UrlImageViewHelper.mResources, bitmap) : null;
                        if (zombieDrawable == null) {
                            UrlImageViewHelper.clog("No usable result, defaulting " + str3, new Object[0]);
                            Drawable drawable2 = drawable3;
                            UrlImageViewHelper.mLiveCache.put(str3, drawable2);
                            drawable = drawable2;
                        } else {
                            drawable = zombieDrawable;
                        }
                        UrlImageViewHelper.mPendingDownloads.remove(str3);
                        if (urlImageViewCallback2 != null && imageView2 == null) {
                            urlImageViewCallback2.onLoaded((ImageView) null, Loader.this.result, str3, false);
                        }
                        Iterator it = arrayList2.iterator();
                        int i = 0;
                        while (it.hasNext()) {
                            ImageView imageView = (ImageView) it.next();
                            String str = (String) UrlImageViewHelper.mPendingViews.get(imageView);
                            if (!str3.equals(str)) {
                                UrlImageViewHelper.clog("Ignoring out of date request to update view for " + str3 + MinimalPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR + str + MinimalPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR + imageView, new Object[0]);
                            } else {
                                int i2 = i + 1;
                                UrlImageViewHelper.mPendingViews.remove(imageView);
                                if (drawable != null) {
                                    imageView.setImageDrawable(drawable);
                                }
                                if (urlImageViewCallback2 == null || imageView != imageView2) {
                                    i = i2;
                                } else {
                                    urlImageViewCallback2.onLoaded(imageView, Loader.this.result, str3, false);
                                    i = i2;
                                }
                            }
                        }
                        UrlImageViewHelper.clog("Populated: " + i, new Object[0]);
                    }
                };
                if (file.exists()) {
                    try {
                        if (checkCacheDuration(file, j)) {
                            clog("File Cache hit on: " + str + ". " + (System.currentTimeMillis() - file.lastModified()) + "ms old.", new Object[0]);
                            try {
                                executeTask(new AsyncTask<Void, Void, Void>() {
                                    /* access modifiers changed from: protected */
                                    public Void doInBackground(Void... voidArr) {
                                        Loader.this.onDownloadComplete((UrlDownloader) null, (InputStream) null, absolutePath);
                                        return null;
                                    }

                                    /* access modifiers changed from: protected */
                                    public void onPostExecute(Void voidR) {
                                        r4.run();
                                    }
                                });
                                return;
                            } catch (Exception e) {
                            }
                        } else {
                            clog("File cache has expired. Refreshing.", new Object[0]);
                        }
                    } catch (Exception e2) {
                    }
                }
                Iterator<UrlDownloader> it = mDownloaders.iterator();
                while (it.hasNext()) {
                    UrlDownloader next = it.next();
                    if (next.canDownloadUrl(str)) {
                        next.download(context, str, absolutePath, r2, r4);
                        return;
                    }
                }
                imageView.setImageDrawable(drawable);
            } else if (imageView != null) {
                arrayList.add(imageView);
            }
        } else if (imageView != null) {
            mPendingViews.remove(imageView);
            imageView.setImageDrawable(drawable);
        }
    }

    public static void setUrlDrawable(ImageView imageView, String str) {
        setUrlDrawable(imageView.getContext(), imageView, str, (Drawable) null, 259200000, (UrlImageViewCallback) null);
    }

    public static void setUrlDrawable(ImageView imageView, String str, int i) {
        setUrlDrawable(imageView.getContext(), imageView, str, i, 259200000);
    }

    public static void setUrlDrawable(ImageView imageView, String str, int i, long j) {
        setUrlDrawable(imageView.getContext(), imageView, str, i, j);
    }

    public static void setUrlDrawable(ImageView imageView, String str, int i, long j, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(imageView.getContext(), imageView, str, i, j, urlImageViewCallback);
    }

    public static void setUrlDrawable(ImageView imageView, String str, int i, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(imageView.getContext(), imageView, str, i, 259200000, urlImageViewCallback);
    }

    public static void setUrlDrawable(ImageView imageView, String str, Drawable drawable) {
        setUrlDrawable(imageView.getContext(), imageView, str, drawable, 259200000, (UrlImageViewCallback) null);
    }

    public static void setUrlDrawable(ImageView imageView, String str, Drawable drawable, long j) {
        setUrlDrawable(imageView.getContext(), imageView, str, drawable, j, (UrlImageViewCallback) null);
    }

    public static void setUrlDrawable(ImageView imageView, String str, Drawable drawable, long j, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(imageView.getContext(), imageView, str, drawable, j, urlImageViewCallback);
    }

    public static void setUrlDrawable(ImageView imageView, String str, Drawable drawable, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(imageView.getContext(), imageView, str, drawable, 259200000, urlImageViewCallback);
    }

    public static void setUrlDrawable(ImageView imageView, String str, UrlImageViewCallback urlImageViewCallback) {
        setUrlDrawable(imageView.getContext(), imageView, str, (Drawable) null, 259200000, urlImageViewCallback);
    }

    public static void setUseBitmapScaling(boolean z) {
        mUseBitmapScaling = z;
    }
}
